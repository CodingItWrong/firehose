---
http_interactions:
- request:
    method: get
    uri: http://codingitwrong.com/2017/07/24/letting-people-learn.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 302
      message: Moved Temporarily
    headers:
      Server:
      - nginx/1.10.3 (Ubuntu)
      Date:
      - Wed, 19 Aug 2020 12:29:38 GMT
      Content-Type:
      - text/html
      Content-Length:
      - '170'
      Connection:
      - keep-alive
      Location:
      - https://codingitwrong.com/2017/07/24/letting-people-learn.html
    body:
      encoding: UTF-8
      string: "<html>\r\n<head><title>302 Found</title></head>\r\n<body bgcolor=\"white\">\r\n<center><h1>302
        Found</h1></center>\r\n<hr><center>nginx/1.10.3 (Ubuntu)</center>\r\n</body>\r\n</html>\r\n"
  recorded_at: Wed, 19 Aug 2020 12:29:38 GMT
- request:
    method: get
    uri: https://codingitwrong.com/2017/07/24/letting-people-learn.html
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - nginx/1.10.3 (Ubuntu)
      Date:
      - Wed, 19 Aug 2020 12:29:38 GMT
      Content-Type:
      - text/html; charset=utf-8
      Last-Modified:
      - Mon, 17 Aug 2020 13:56:23 GMT
      Transfer-Encoding:
      - chunked
      Connection:
      - keep-alive
      Etag:
      - W/"5f3a8c87-2a24"
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
  recorded_at: Wed, 19 Aug 2020 12:29:38 GMT
recorded_with: VCR 6.0.0
